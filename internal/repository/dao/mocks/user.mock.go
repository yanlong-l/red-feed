// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/dao/user.go -package=daomocks -destination=./internal/repository/dao/mocks/user.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	dao "red-feed/internal/repository/dao"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGORMUserDAO is a mock of UserDAO interface.
type MockGORMUserDAO struct {
	ctrl     *gomock.Controller
	recorder *MockGORMUserDAOMockRecorder
	isgomock struct{}
}

// MockGORMUserDAOMockRecorder is the mock recorder for MockGORMUserDAO.
type MockGORMUserDAOMockRecorder struct {
	mock *MockGORMUserDAO
}

// NewMockGORMUserDAO creates a new mock instance.
func NewMockGORMUserDAO(ctrl *gomock.Controller) *MockGORMUserDAO {
	mock := &MockGORMUserDAO{ctrl: ctrl}
	mock.recorder = &MockGORMUserDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGORMUserDAO) EXPECT() *MockGORMUserDAOMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockGORMUserDAO) FindByEmail(ctx context.Context, email string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockGORMUserDAOMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockGORMUserDAO)(nil).FindByEmail), ctx, email)
}

// FindById mocks base method.
func (m *MockGORMUserDAO) FindById(ctx context.Context, id int64) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockGORMUserDAOMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockGORMUserDAO)(nil).FindById), ctx, id)
}

// FindByPhone mocks base method.
func (m *MockGORMUserDAO) FindByPhone(ctx context.Context, phone string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockGORMUserDAOMockRecorder) FindByPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockGORMUserDAO)(nil).FindByPhone), ctx, phone)
}

// FindByWechat mocks base method.
func (m *MockGORMUserDAO) FindByWechat(ctx context.Context, openID string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWechat", ctx, openID)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWechat indicates an expected call of FindByWechat.
func (mr *MockGORMUserDAOMockRecorder) FindByWechat(ctx, openID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWechat", reflect.TypeOf((*MockGORMUserDAO)(nil).FindByWechat), ctx, openID)
}

// Insert mocks base method.
func (m *MockGORMUserDAO) Insert(ctx context.Context, u dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockGORMUserDAOMockRecorder) Insert(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGORMUserDAO)(nil).Insert), ctx, u)
}
