// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"red-feed/internal/events/article"
	"red-feed/internal/repository"
	"red-feed/internal/repository/cache"
	"red-feed/internal/repository/dao"
	"red-feed/internal/service"
	"red-feed/internal/web"
	"red-feed/internal/web/jwt"
	"red-feed/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitApp() *App {
	cmdable := ioc.InitRedis()
	handler := ijwt.NewRedisJWTHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.InitMiddlewares(cmdable, handler, logger)
	db := ioc.InitDB()
	userDAO := dao.NewGORMUserDAO(db)
	redisUserCache := cache.NewUserCache(cmdable)
	cachedUserRepository := repository.NewUserRepository(userDAO, redisUserCache)
	userService := service.NewUserService(cachedUserRepository)
	smsService := ioc.InitSMSService()
	redisCodeCache := cache.NewCodeCache(cmdable)
	cachedCodeRepository := repository.NewCodeRepository(redisCodeCache)
	codeService := service.NewCodeService(smsService, cachedCodeRepository)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	wechatService := ioc.InitWechatService(logger)
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService)
	articleDao := dao.NewGORMArticleDao(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDao, articleCache, logger, cachedUserRepository)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer, logger)
	interactiveDAO := dao.NewInteractiveDAO(db)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository.NewInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service.NewInteractiveService(interactiveRepository, logger)
	articleHandler := web.NewArticleHandler(articleService, logger, interactiveService)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	consumer := article.NewInteractiveReadEventBatchConsumer(client, interactiveRepository, logger)
	v2 := ioc.NewConsumers(consumer)
	rankingService := service.NewBatchRankingService(articleService, interactiveService)
	rlockClient := ioc.InitRLockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, logger)
	cron := ioc.InitJobs(logger, rankingJob)
	app := &App{
		web:       engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var rankingServiceSet = wire.NewSet(repository.NewCachedRankingRepository, cache.NewRankingRedisCache, service.NewBatchRankingService)
